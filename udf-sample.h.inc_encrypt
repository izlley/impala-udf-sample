// Copyright 2012 Cloudera Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#ifndef IMPALA_UDF_SAMPLE_UDF_H
#define IMPALA_UDF_SAMPLE_UDF_H

#include <udf/udf.h>

using namespace impala_udf;

// Usage: > create function rsa-encryption(string) returns string
//          location '/user/cloudera/libudfsample.so' SYMBOL='RSAPublicEncryption';
//        > select rsa-decryption('');
StringVal RSAPublicEncryption(FunctionContext* context, const StringVal& input);

// Usage: > create function rsa-decryption(string) returns string
//          location '/user/cloudera/libudfsample.so' SYMBOL='RSAPrivateDecryption';                                                                              
//        > select rsa-decryption('');
StringVal RSAPrivateDecryption(FunctionContext* context, const StringVal& input);

void CryptoClose(FunctionContext* context, FunctionContext::FunctionStateScope scope);
void CryptoPrepare(FunctionContext* context, FunctionContext::FunctionStateScope scope);
int calcDecodeLength(const char* b64input, int len);
int Base64Encode(char *data, char** buffer, int len);
int Base64Decode(char* b64message, char** buffer, int len);

IntVal AddUdf(FunctionContext* context, const IntVal& arg1, const IntVal& arg2);

// Usage: > create function rsa-decryption(string) returns string
//          location '/user/cloudera/libudfsample.so' SYMBOL='RSAPrivateDecryption';                                                                              
//        > select rsa-decryption('');
StringVal FindInnerposInSet(FunctionContext* context, const FloatVal& x, const FloatVal& y,
  const StringVal& pos_set, const IntVal& radius, const IntVal& find_num = IntVal(1));

#endif
